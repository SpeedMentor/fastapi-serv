apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
data:
  elasticsearch.yml: |
    cluster.name: elasticsearch-cluster
    network.host: 0.0.0.0
    discovery.type: single-node
    xpack.security.enabled: true
    xpack.monitoring.enabled: true
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secrets
type: Opaque
stringData:
  elastic-password: "elastic123secure"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
spec:
  serviceName: elasticsearch-service
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      imagePullSecrets:
        - name: default-secret
      containers:
      - name: elasticsearch
        image: docker.io/library/elasticsearch:8.10.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        env:
        - name: discovery.type
          value: single-node
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secrets
              key: elastic-password
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - -c
              - |
                #!/bin/bash
                until curl -s -k "http://localhost:9200" > /dev/null; do sleep 10; done
                TOKEN=$(curl -s -k -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" "http://localhost:9200/_security/service/elastic/kibana/credential/token/kibana-token" | grep -o '"value":"[^"]*"' | cut -d'"' -f4)
                if [ ! -z "$TOKEN" ]; then
                  kubectl create secret generic kibana-token-secret --from-literal=token=$TOKEN -o yaml --dry-run=client | kubectl apply -f -
                fi
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
      annotations:
        everest.io/disk-volume-type: GPSSD
        everest.io/enterprise-project-id: ff463241-f63b-45f1-82d5-f8c57b0ee80f
        volume.beta.kubernetes.io/storage-provisioner: everest-csi-provisioner
        volume.kubernetes.io/storage-provisioner: everest-csi-provisioner
    spec:
      storageClassName: csi-disk
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 30Gi
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
spec:
  selector:
    app: elasticsearch
  ports:
  - port: 9200
    targetPort: 9200
    name: http
  - port: 9300
    targetPort: 9300
    name: transport
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      imagePullSecrets:
        - name: default-secret
      containers:
      - name: kibana
        image: docker.io/library/kibana:8.10.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5601
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch-service:9200"
        - name: ELASTICSEARCH_SERVICEACCOUNT_TOKEN
          valueFrom:
            secretKeyRef:
              name: kibana-token-secret
              key: token
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: kibana-service
spec:
  selector:
    app: kibana
  ports:
  - port: 5601
    targetPort: 5601
  type: LoadBalancer
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
spec:
  selector:
    matchLabels:
      app: filebeat
  template:
    metadata:
      labels:
        app: filebeat
    spec:
      imagePullSecrets:
        - name: default-secret
      containers:
      - name: filebeat
        image: docker.io/elastic/filebeat:8.10.1
        imagePullPolicy: IfNotPresent
        env:
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secrets
              key: elastic-password
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: filebeat-config
          mountPath: /usr/share/filebeat/filebeat.yml
          subPath: filebeat.yml
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: filebeat-config
        configMap:
          name: filebeat-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
data:
  filebeat.yml: |
    filebeat.inputs:
    - type: container
      paths:
        - /var/lib/docker/containers/*/*.log

    output.elasticsearch:
      hosts: ["elasticsearch-service:9200"]
      username: "elastic"
      password: "${ELASTIC_PASSWORD}"
      ssl.enabled: false

    setup.kibana:
      host: "kibana-service:5601"
      ssl.enabled: false

    processors:
      - add_kubernetes_metadata:
          host: ${NODE_NAME}
          matchers:
          - logs_path:
              logs_path: "/var/log/containers/" 